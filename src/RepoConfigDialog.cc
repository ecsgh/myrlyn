/*  ---------------------------------------------------------
               __  __            _
              |  \/  |_   _ _ __| |_   _ _ __
              | |\/| | | | | '__| | | | | '_ \
              | |  | | |_| | |  | | |_| | | | |
              |_|  |_|\__, |_|  |_|\__, |_| |_|
                      |___/        |___/
    ---------------------------------------------------------

    Project:  Myrlyn Package Manager GUI
    Copyright (c) Stefan Hundhammer <Stefan.Hundhammer@gmx.de>
    License:  GPL V2 - See file LICENSE for details.

    Textdomain "qt-pkg"
 */


#include "Exception.h"
#include "Logger.h"
#include "MainWindow.h"
#include "WindowSettings.h"
#include "RepoConfigDialog.h"


RepoConfigDialog::RepoConfigDialog( QWidget * parent )
    : QDialog( parent ? parent : MainWindow::instance() )
    , _ui( new Ui::RepoConfig )  // Use the Qt designer .ui form (XML)
{
    CHECK_NEW( _ui );
    _ui->setupUi( this ); // Actually create the widgets from the .ui form

    // See ui_repo-config.h for the widget names.
    //
    // That header is generated by Qt's uic (user interface compiler)
    // from the XML .ui file created with Qt designer.
    //
    // Take care in Qt designer to give each widget a meaningful name in the
    // widget tree at the top right: They are also the member variable names
    // for the _ui object.

    WindowSettings::read( this, "RepoConfigDialog" );
    _ui->repoTable->populate();
    _ui->repoTable->selectSomething();
    updateCurrentData();
    connectWidgets();
}


RepoConfigDialog::~RepoConfigDialog()
{
    WindowSettings::write( this, "RepoConfigDialog" );
    
    delete _ui;
}


void RepoConfigDialog::connectWidgets()
{
    // _ui->closeButton() is already connected to QDialog::accept()
    // in the .ui file
}


void RepoConfigDialog::currentChanged()
{
#if 0
    RepoTableItem * current = _ui->repoTable->currentRepoItem();
#endif
}


void RepoConfigDialog::updateCurrentData()
{
    RepoTableItem * current = _ui->repoTable->currentRepoItem();

    if ( current )
    {
        
    }
    else // Clear all
    {
        
    }
}


void RepoConfigDialog::updateCurrentStatus()
{
    
}
