/*  ---------------------------------------------------------
               __  __            _
              |  \/  |_   _ _ __| |_   _ _ __
              | |\/| | | | | '__| | | | | '_ \
              | |  | | |_| | |  | | |_| | | | |
              |_|  |_|\__, |_|  |_|\__, |_| |_|
                      |___/        |___/
    ---------------------------------------------------------

    Project:  Myrlyn Package Manager GUI
    Copyright (c) Stefan Hundhammer <Stefan.Hundhammer@gmx.de>
    License:  GPL V2 - See file LICENSE for details.

    Textdomain "qt-pkg"
 */


#include "Exception.h"
#include "Logger.h"
#include "MainWindow.h"
#include "WindowSettings.h"
#include "utf8.h"
#include "RepoConfigDialog.h"


RepoConfigDialog::RepoConfigDialog( QWidget * parent )
    : QDialog( parent ? parent : MainWindow::instance() )
    , _ui( new Ui::RepoConfig )  // Use the Qt designer .ui form (XML)
{
    CHECK_NEW( _ui );
    _ui->setupUi( this ); // Actually create the widgets from the .ui form

    // See ui_repo-config.h for the widget names.
    //
    // That header is generated by Qt's uic (user interface compiler)
    // from the XML .ui file created with Qt designer.
    //
    // Take care in Qt designer to give each widget a meaningful name in the
    // widget tree at the top right: They are also the member variable names
    // for the _ui object.

    WindowSettings::read( this, "RepoConfigDialog" );
    _ui->currentRepoName->setTextFormat( Qt::RichText );
    _ui->repoTable->populate();
    _ui->repoTable->selectSomething();
    updateCurrentData();
    connectWidgets();
}


RepoConfigDialog::~RepoConfigDialog()
{
    WindowSettings::write( this, "RepoConfigDialog" );

    delete _ui;
}


void RepoConfigDialog::connectWidgets()
{
    connect( _ui->repoTable, SIGNAL( currentItemChanged( QTreeWidgetItem *, QTreeWidgetItem * ) ),
             this,           SLOT  ( currentChanged() ) );

    connect( _ui->currentRepoPriority,    SIGNAL( valueChanged ( int ) ),
             this,                        SLOT  ( currentEdited()      ) );

    connect( _ui->currentRepoEnabled,     SIGNAL( stateChanged ( int ) ),
             this,                        SLOT  ( currentEdited()      ) );

    connect( _ui->currentRepoAutoRefresh, SIGNAL( stateChanged ( int ) ),
             this,                        SLOT  ( currentEdited()      ) );

#if 0

    connect( _ui->repoTable, SIGNAL( columnDoubleClicked( int button, QTreeWidgetItem * item, int col, const QPoint & ) ),
             this,           SLOT  ( itemDoubleClicked  ( int button, QTreeWidgetItem * item, int col ) ) );;

    connect( _ui->addButton(),    SIGNAL( clicked() ),
             this,                SLOT  ( addRepo() ) );

    connect( _ui->editButton(),   SIGNAL( clicked() ),
             this,                SLOT  ( editRepo() ) );

    connect( _ui->deleteButton(), SIGNAL( clicked() ),
             this,                SLOT  ( deleteRepo() ) );

    // _ui->closeButton() is already connected to QDialog::accept()
    // in the .ui file
#endif
}


void RepoConfigDialog::currentChanged()
{
    updateCurrentData();
}


void RepoConfigDialog::updateCurrentData()
{
    QSignalBlocker blockPrio       ( _ui->currentRepoPriority    );
    QSignalBlocker blockEnabled    ( _ui->currentRepoEnabled     );
    QSignalBlocker blockAutoRefresh( _ui->currentRepoAutoRefresh );

    RepoTableItem * current = _ui->repoTable->currentRepoItem();

    if ( current )
    {
        const ZyppRepoInfo & repoInfo = current->repoInfo();

#if 0
        logDebug() << "Current: "      << repoInfo.name()
                   << " Prio: "        << repoInfo.priority()
                   << " Enabled: "     << repoInfo.enabled()
                   << " AutoRefresh: " << repoInfo.autorefresh()
                   << endl;
#endif

        _ui->currentRepoPriority->setEnabled( true );
        _ui->currentRepoEnabled->setEnabled( true );
        _ui->currentRepoAutoRefresh->setEnabled( true );

        _ui->currentRepoName->setText( QString( "<b>%1</b>" ).arg( fromUTF8( repoInfo.name() ) ) );
        _ui->currentRepoUrl->setText ( fromUTF8( repoInfo.url().asString() ) );
        _ui->currentRepoPriority->setValue( repoInfo.priority() );
        _ui->currentRepoEnabled->setChecked( repoInfo.enabled() );
        _ui->currentRepoAutoRefresh->setChecked( repoInfo.autorefresh());
    }
    else // Clear all
    {
        _ui->currentRepoName->clear();
        _ui->currentRepoUrl->clear();
        _ui->currentRepoPriority->setValue( 99 );
        _ui->currentRepoEnabled->setChecked( false );
        _ui->currentRepoAutoRefresh->setChecked( false );

        _ui->currentRepoPriority->setEnabled( false );
        _ui->currentRepoEnabled->setEnabled( false );
        _ui->currentRepoAutoRefresh->setEnabled( false );
    }
}


void RepoConfigDialog::currentEdited()
{
    RepoTableItem * currentItem = _ui->repoTable->currentRepoItem();

    if ( currentItem )
    {
        ZyppRepoInfo repoInfo = currentItem->repoInfo();

        repoInfo.setPriority( _ui->currentRepoPriority->value() );
        repoInfo.setEnabled( _ui->currentRepoEnabled->isChecked() );
        repoInfo.setAutorefresh( _ui->currentRepoAutoRefresh->isChecked() );

#if 0
        logDebug() << "Current: "      << repoInfo.name()
                   << " Prio: "        << repoInfo.priority()
                   << " Enabled: "     << repoInfo.enabled()
                   << " AutoRefresh: " << repoInfo.autorefresh()
                   << endl;
#endif

        currentItem->setRepoInfo( repoInfo );

        emit currentStatusChanged();
    }
}
